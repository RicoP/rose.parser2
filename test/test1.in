inline static int foobar1(int n) ;

inline static int foobar2(int n) {
  hello();
}

inline static int foobar3(int n) {
  if (n == 0) { hello(); } 
}

inline static int foobar4(int n) {
  if (n == 0) { 
    if (n == 0) {  
      hello(); 
    }
  } 
}

inline static int foobar5(int n) {
  if (n == 0) { 
      hello(); 
  } 
  if (n == 1) { 
      ballo(); 
  } 
}


inline static int foobar5(int n) {
  if (n == 0) { 
      hello(); 
      hello(); 
  } 
  if (n == 1) { 
      ballo(); 
  } 
}


inline static int foobar6(int n) {
  { 
      hello(); 
      hello(); 
  } 
  if (n == 1) { 
      ballo(); 
  } 
}

inline static int foobar7(int n) {
  { 
      hello(); 
      hello(); 
  } 
  { 
      ballo(); 
  } 
}

inline static int foobar8(int n) {
  { 
      hello(); 
      hello(); 
  } 
  hello(); 

  if (n == 1) { 
      ballo(); 
  } 
}


inline static int foobar8(int n) {
  const char * sss[] =  { };
}


inline static int foobar8(int n) {
  const char * sss[] =  { "ident"               , "asdas" {} };
}


inline static int foobar8(int n) {
  const char * sss[] =  { 
    {  }
  };
}

inline static int foobar8(int n) {
  const char * sss[] =  { 
    { "ident"               , "asdas" }
  };
}


inline static int foobar8(int n) {
  const char * sss[] =  { 
    { "ident"               , "asdas" },
    { "ident"               , "asdas" }
  };
}


#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif

#include "rose/core/hash.h"

#include "stdio.h"
#include <math.h>

struct Vec2 {
  int x;
  int y;
};

struct Vec3 {
  float x,y = 0,z;
};

//
// Hello World

void A();
void foo();
void baz() {}

inline static int fib(int n) {
  if (n == 0) { return 0; } 
  if (n == 1) { return 1; }
  return fib(n - 1) + fib(n - 2);
}

//
// Hallo Ballo

/* 

// whatever
Multi line comment 

*/

int main() {
  char c = 'c';
  char c2 = 'rico';
  int n;
  int i = 0;

  int x = 0xFF00ff;
  int y = -42;
  int z = +42;
  
  while (i < 10) {
    n = fib(10);
    print(n);
    i = i + 1;
  }

  do {
    print("Hi!");    
  } while(false) ;

  int x = -42;
  float y = 3.14f;
  double z = .001;

  x = y;
  int i = k;
  int k = i+k-k / 42;

  if(x < y) {  print("Hi!");  }
  if(y >= x);
  if(y >= x) {return 0; }

  if(0 < y) {  print("Hi!");  }
  if(y >= 0);
  if(1 >= 0) {return 0; }

  if(x) { return 0; }
  if(!x) { return 0; }
  if(!!x) { return 0; }


  return 0;
}

$(function_t { .x = 4, .y = "hello", w = 4, hello })
inline static int foobarX(int n /* a value / or something else */) {
  hello();
}

$  ( record_t {  } )
struct Vector3 {
  private:
    int x,y,z;


    int a = 0xFF00ff;
    int b = 42;
    int c = 42;    
    int b = -42;
    int c = +42;

    int d = 0;
    int e = 07;
    int f = 07;
    

    // namespaces
    ::float f = .3f;
    ::float f = -.3f;
    ::float f = +.3f;
    std::string s1 = "Hello, world!\"";
    ::std::string s2 = "Hello, world!\"";
    ::rose::strings::const_string s3 = "Hello, world!\"";

  public:
    float sqrt_length() const { return x*x + y*y + z*z; }

    $(function { pure })
    float length() const { return sqrt(sqrt_length()); }
};



int main() {
    MpcConfig config[] = {
        { "ident"               , "asdas" }
    };
}


int main() {
    MpcConfig config[] = {
        { "ident"               ,R"___( /[a-zA-Z_][a-zA-Z0-9_]*/ )___" },
        { "namespace_global"    ,R"___( "::" )___" },
        { "namespace"           ,R"___( <ident> "::" )___" },
        { "type"                ,R"___( <namespace_global>? <namespace>* <ident> )___" },
        { "float"               ,R"___( /-?\d?.\d+[f]?/ )___" },
        { "integer"             ,R"___( /-?\d+/ )___" },
        { "number"              ,R"___( <float> | <integer> )___" },
        { "character"           ,R"___( /'(\\.|[^'])*'/ )___" },
        { "string"              ,R"___( /"(\\.|[^"])*"/ )___" },
        { "assignment"          ,R"___( '=' <lexp> )___" },
        { "smallcpp"            ,R"___( /^/ ( <include>
                                            | <macro>
                                            | <declaration>

                                            | <anno_record>
                                            | <record>

                                            | <anno_function>
                                            | <function>
                                            )* /$/
                                            )___" },        
    };
}